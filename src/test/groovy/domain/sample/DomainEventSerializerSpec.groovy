package domain.sample


import domain.sample.events.*
import spock.lang.Specification

import java.time.Instant

class DomainEventSerializerSpec extends Specification {

  def "expect serialization does not throw an exception"() {
    given:
    def domainEventSerializer = new DomainEventSerializer()
    when: "serialization and successive deserialization returns the original object"
    domainEventSerializer.serialize(event)
    then:
    noExceptionThrown()
    where: "the event is as follows"
    event << [
            MetadataRegistered.create(SampleCode.fromString("QABCD001A0"), Instant.MIN),
            SampleReceived.create(SampleCode.fromString("QABCD001A0"), Instant.MIN),
            PassedQualityControl.create(SampleCode.fromString("QABCD001A0"), Instant.MIN),
            FailedQualityControl.create(SampleCode.fromString("QABCD001A0"), Instant.MIN),
            LibraryPrepared.create(SampleCode.fromString("QABCD001A0"), Instant.MIN),
            DataMadeAvailable.create(SampleCode.fromString("QABCD001A0"), Instant.MIN)
    ]
  }

  def "expect existing serialization is preserved"() {

    def serializer = new DomainEventSerializer()
    expect:
    serializer.deserialize(bytes) == expectedEvent
    where:
    bytes << [
            [-84, -19, 0, 5, 115, 114, 0, 39, 100, 111, 109, 97, 105, 110, 46, 115, 97, 109, 112, 108, 101, 46, 101, 118, 101, 110, 116, 115, 46, 77, 101, 116, 97, 100, 97, 116, 97, 82, 101, 103, 105, 115, 116, 101, 114, 101, 100, 21, -83, -11, -99, -75, -109, 24, -49, 2, 0, 0, 120, 114, 0, 25, 100, 111, 109, 97, 105, 110, 46, 115, 97, 109, 112, 108, 101, 46, 83, 97, 109, 112, 108, 101, 69, 118, 101, 110, 116, -126, -113, 3, -87, -78, -16, 74, 105, 2, 0, 2, 76, 0, 10, 111, 99, 99, 117, 114, 114, 101, 100, 79, 110, 116, 0, 19, 76, 106, 97, 118, 97, 47, 116, 105, 109, 101, 47, 73, 110, 115, 116, 97, 110, 116, 59, 76, 0, 10, 115, 97, 109, 112, 108, 101, 67, 111, 100, 101, 116, 0, 26, 76, 100, 111, 109, 97, 105, 110, 47, 115, 97, 109, 112, 108, 101, 47, 83, 97, 109, 112, 108, 101, 67, 111, 100, 101, 59, 120, 112, 115, 114, 0, 13, 106, 97, 118, 97, 46, 116, 105, 109, 101, 46, 83, 101, 114, -107, 93, -124, -70, 27, 34, 72, -78, 12, 0, 0, 120, 112, 119, 13, 2, -1, -113, -29, 16, 20, 100, 20, 0, 0, 0, 0, 0, 120, 115, 114, 0, 24, 100, 111, 109, 97, 105, 110, 46, 115, 97, 109, 112, 108, 101, 46, 83, 97, 109, 112, 108, 101, 67, 111, 100, 101, 30, -31, -87, 89, -41, -29, -72, -25, 2, 0, 1, 76, 0, 4, 116, 101, 120, 116, 116, 0, 18, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 120, 112, 116, 0, 10, 81, 65, 66, 67, 68, 48, 48, 49, 65, 48] as byte[],
            [-84, -19, 0, 5, 115, 114, 0, 35, 100, 111, 109, 97, 105, 110, 46, 115, 97, 109, 112, 108, 101, 46, 101, 118, 101, 110, 116, 115, 46, 83, 97, 109, 112, 108, 101, 82, 101, 99, 101, 105, 118, 101, 100, -62, -107, -97, 80, 97, 95, -12, -60, 2, 0, 0, 120, 114, 0, 25, 100, 111, 109, 97, 105, 110, 46, 115, 97, 109, 112, 108, 101, 46, 83, 97, 109, 112, 108, 101, 69, 118, 101, 110, 116, -126, -113, 3, -87, -78, -16, 74, 105, 2, 0, 2, 76, 0, 10, 111, 99, 99, 117, 114, 114, 101, 100, 79, 110, 116, 0, 19, 76, 106, 97, 118, 97, 47, 116, 105, 109, 101, 47, 73, 110, 115, 116, 97, 110, 116, 59, 76, 0, 10, 115, 97, 109, 112, 108, 101, 67, 111, 100, 101, 116, 0, 26, 76, 100, 111, 109, 97, 105, 110, 47, 115, 97, 109, 112, 108, 101, 47, 83, 97, 109, 112, 108, 101, 67, 111, 100, 101, 59, 120, 112, 115, 114, 0, 13, 106, 97, 118, 97, 46, 116, 105, 109, 101, 46, 83, 101, 114, -107, 93, -124, -70, 27, 34, 72, -78, 12, 0, 0, 120, 112, 119, 13, 2, -1, -113, -29, 16, 20, 100, 20, 0, 0, 0, 0, 0, 120, 115, 114, 0, 24, 100, 111, 109, 97, 105, 110, 46, 115, 97, 109, 112, 108, 101, 46, 83, 97, 109, 112, 108, 101, 67, 111, 100, 101, 30, -31, -87, 89, -41, -29, -72, -25, 2, 0, 1, 76, 0, 4, 116, 101, 120, 116, 116, 0, 18, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 120, 112, 116, 0, 10, 81, 65, 66, 67, 68, 48, 48, 49, 65, 48] as byte[],
            [-84, -19, 0, 5, 115, 114, 0, 41, 100, 111, 109, 97, 105, 110, 46, 115, 97, 109, 112, 108, 101, 46, 101, 118, 101, 110, 116, 115, 46, 80, 97, 115, 115, 101, 100, 81, 117, 97, 108, 105, 116, 121, 67, 111, 110, 116, 114, 111, 108, -5, -39, -57, 36, -73, 53, 24, 17, 2, 0, 0, 120, 114, 0, 25, 100, 111, 109, 97, 105, 110, 46, 115, 97, 109, 112, 108, 101, 46, 83, 97, 109, 112, 108, 101, 69, 118, 101, 110, 116, -126, -113, 3, -87, -78, -16, 74, 105, 2, 0, 2, 76, 0, 10, 111, 99, 99, 117, 114, 114, 101, 100, 79, 110, 116, 0, 19, 76, 106, 97, 118, 97, 47, 116, 105, 109, 101, 47, 73, 110, 115, 116, 97, 110, 116, 59, 76, 0, 10, 115, 97, 109, 112, 108, 101, 67, 111, 100, 101, 116, 0, 26, 76, 100, 111, 109, 97, 105, 110, 47, 115, 97, 109, 112, 108, 101, 47, 83, 97, 109, 112, 108, 101, 67, 111, 100, 101, 59, 120, 112, 115, 114, 0, 13, 106, 97, 118, 97, 46, 116, 105, 109, 101, 46, 83, 101, 114, -107, 93, -124, -70, 27, 34, 72, -78, 12, 0, 0, 120, 112, 119, 13, 2, -1, -113, -29, 16, 20, 100, 20, 0, 0, 0, 0, 0, 120, 115, 114, 0, 24, 100, 111, 109, 97, 105, 110, 46, 115, 97, 109, 112, 108, 101, 46, 83, 97, 109, 112, 108, 101, 67, 111, 100, 101, 30, -31, -87, 89, -41, -29, -72, -25, 2, 0, 1, 76, 0, 4, 116, 101, 120, 116, 116, 0, 18, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 120, 112, 116, 0, 10, 81, 65, 66, 67, 68, 48, 48, 49, 65, 48] as byte[],
            [-84, -19, 0, 5, 115, 114, 0, 41, 100, 111, 109, 97, 105, 110, 46, 115, 97, 109, 112, 108, 101, 46, 101, 118, 101, 110, 116, 115, 46, 70, 97, 105, 108, 101, 100, 81, 117, 97, 108, 105, 116, 121, 67, 111, 110, 116, 114, 111, 108, 13, -54, -64, 40, 119, -77, 20, -34, 2, 0, 0, 120, 114, 0, 25, 100, 111, 109, 97, 105, 110, 46, 115, 97, 109, 112, 108, 101, 46, 83, 97, 109, 112, 108, 101, 69, 118, 101, 110, 116, -126, -113, 3, -87, -78, -16, 74, 105, 2, 0, 2, 76, 0, 10, 111, 99, 99, 117, 114, 114, 101, 100, 79, 110, 116, 0, 19, 76, 106, 97, 118, 97, 47, 116, 105, 109, 101, 47, 73, 110, 115, 116, 97, 110, 116, 59, 76, 0, 10, 115, 97, 109, 112, 108, 101, 67, 111, 100, 101, 116, 0, 26, 76, 100, 111, 109, 97, 105, 110, 47, 115, 97, 109, 112, 108, 101, 47, 83, 97, 109, 112, 108, 101, 67, 111, 100, 101, 59, 120, 112, 115, 114, 0, 13, 106, 97, 118, 97, 46, 116, 105, 109, 101, 46, 83, 101, 114, -107, 93, -124, -70, 27, 34, 72, -78, 12, 0, 0, 120, 112, 119, 13, 2, -1, -113, -29, 16, 20, 100, 20, 0, 0, 0, 0, 0, 120, 115, 114, 0, 24, 100, 111, 109, 97, 105, 110, 46, 115, 97, 109, 112, 108, 101, 46, 83, 97, 109, 112, 108, 101, 67, 111, 100, 101, 30, -31, -87, 89, -41, -29, -72, -25, 2, 0, 1, 76, 0, 4, 116, 101, 120, 116, 116, 0, 18, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 120, 112, 116, 0, 10, 81, 65, 66, 67, 68, 48, 48, 49, 65, 48] as byte[],
            [-84, -19, 0, 5, 115, 114, 0, 36, 100, 111, 109, 97, 105, 110, 46, 115, 97, 109, 112, 108, 101, 46, 101, 118, 101, 110, 116, 115, 46, 76, 105, 98, 114, 97, 114, 121, 80, 114, 101, 112, 97, 114, 101, 100, -40, -4, -114, -63, 17, 51, -36, -40, 2, 0, 0, 120, 114, 0, 25, 100, 111, 109, 97, 105, 110, 46, 115, 97, 109, 112, 108, 101, 46, 83, 97, 109, 112, 108, 101, 69, 118, 101, 110, 116, -126, -113, 3, -87, -78, -16, 74, 105, 2, 0, 2, 76, 0, 10, 111, 99, 99, 117, 114, 114, 101, 100, 79, 110, 116, 0, 19, 76, 106, 97, 118, 97, 47, 116, 105, 109, 101, 47, 73, 110, 115, 116, 97, 110, 116, 59, 76, 0, 10, 115, 97, 109, 112, 108, 101, 67, 111, 100, 101, 116, 0, 26, 76, 100, 111, 109, 97, 105, 110, 47, 115, 97, 109, 112, 108, 101, 47, 83, 97, 109, 112, 108, 101, 67, 111, 100, 101, 59, 120, 112, 115, 114, 0, 13, 106, 97, 118, 97, 46, 116, 105, 109, 101, 46, 83, 101, 114, -107, 93, -124, -70, 27, 34, 72, -78, 12, 0, 0, 120, 112, 119, 13, 2, -1, -113, -29, 16, 20, 100, 20, 0, 0, 0, 0, 0, 120, 115, 114, 0, 24, 100, 111, 109, 97, 105, 110, 46, 115, 97, 109, 112, 108, 101, 46, 83, 97, 109, 112, 108, 101, 67, 111, 100, 101, 30, -31, -87, 89, -41, -29, -72, -25, 2, 0, 1, 76, 0, 4, 116, 101, 120, 116, 116, 0, 18, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 120, 112, 116, 0, 10, 81, 65, 66, 67, 68, 48, 48, 49, 65, 48] as byte[],
            [-84, -19, 0, 5, 115, 114, 0, 38, 100, 111, 109, 97, 105, 110, 46, 115, 97, 109, 112, 108, 101, 46, 101, 118, 101, 110, 116, 115, 46, 68, 97, 116, 97, 77, 97, 100, 101, 65, 118, 97, 105, 108, 97, 98, 108, 101, -104, -49, -40, 2, 84, -35, 124, -38, 2, 0, 0, 120, 114, 0, 25, 100, 111, 109, 97, 105, 110, 46, 115, 97, 109, 112, 108, 101, 46, 83, 97, 109, 112, 108, 101, 69, 118, 101, 110, 116, -126, -113, 3, -87, -78, -16, 74, 105, 2, 0, 2, 76, 0, 10, 111, 99, 99, 117, 114, 114, 101, 100, 79, 110, 116, 0, 19, 76, 106, 97, 118, 97, 47, 116, 105, 109, 101, 47, 73, 110, 115, 116, 97, 110, 116, 59, 76, 0, 10, 115, 97, 109, 112, 108, 101, 67, 111, 100, 101, 116, 0, 26, 76, 100, 111, 109, 97, 105, 110, 47, 115, 97, 109, 112, 108, 101, 47, 83, 97, 109, 112, 108, 101, 67, 111, 100, 101, 59, 120, 112, 115, 114, 0, 13, 106, 97, 118, 97, 46, 116, 105, 109, 101, 46, 83, 101, 114, -107, 93, -124, -70, 27, 34, 72, -78, 12, 0, 0, 120, 112, 119, 13, 2, -1, -113, -29, 16, 20, 100, 20, 0, 0, 0, 0, 0, 120, 115, 114, 0, 24, 100, 111, 109, 97, 105, 110, 46, 115, 97, 109, 112, 108, 101, 46, 83, 97, 109, 112, 108, 101, 67, 111, 100, 101, 30, -31, -87, 89, -41, -29, -72, -25, 2, 0, 1, 76, 0, 4, 116, 101, 120, 116, 116, 0, 18, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 120, 112, 116, 0, 10, 81, 65, 66, 67, 68, 48, 48, 49, 65, 48] as byte[]
    ]
    expectedEvent << [
            MetadataRegistered.create(SampleCode.fromString("QABCD001A0"), Instant.MIN),
            SampleReceived.create(SampleCode.fromString("QABCD001A0"), Instant.MIN),
            PassedQualityControl.create(SampleCode.fromString("QABCD001A0"), Instant.MIN),
            FailedQualityControl.create(SampleCode.fromString("QABCD001A0"), Instant.MIN),
            LibraryPrepared.create(SampleCode.fromString("QABCD001A0"), Instant.MIN),
            DataMadeAvailable.create(SampleCode.fromString("QABCD001A0"), Instant.MIN)
    ]
  }

  def "expect serialization and successive deserialization returns the original object"() {
    given:
    def domainEventSerializer = new DomainEventSerializer()
    when: "serialization and successive deserialization returns the original object"
    def deserialized = domainEventSerializer.deserialize(domainEventSerializer.serialize(event))
    then:
    deserialized == event
    where: "the event is as follows"
    event << [
            MetadataRegistered.create(SampleCode.fromString("QABCD001A0"), Instant.MIN),
            SampleReceived.create(SampleCode.fromString("QABCD001A0"), Instant.MIN),
            PassedQualityControl.create(SampleCode.fromString("QABCD001A0"), Instant.MIN),
            FailedQualityControl.create(SampleCode.fromString("QABCD001A0"), Instant.MIN),
            LibraryPrepared.create(SampleCode.fromString("QABCD001A0"), Instant.MIN),
            DataMadeAvailable.create(SampleCode.fromString("QABCD001A0"), Instant.MIN)
    ]
  }

}
